valid_solution = lambda board: checkZeroes(board) and checkNestedArr(board) and checkCols(board) and checkBlocks(board)

checkZeroes = lambda arr: len([a for a in arr if 0 in a]) == 0

checkNestedArr = lambda arr: len([0 for a in arr if checkNine(a)]) == 9
    
checkNine = lambda arr: len([n for n in [1,2,3,4,5,6,7,8,9] if n in arr]) == 9

checkCols = lambda arr: checkNestedArr([[a[i] for a in arr] for i in range(9)])
    
def checkBlocks(arr):
    
    import math
    
    blockObj = {
        "00":[],"01":[],"02":[],
        "10":[],"11":[],"12":[],
        "20":[],"21":[],"22":[]
    }
    
    for i in range(9):
        
        for j in range(9):
            
            coord = f'{math.floor(i / 3)}{math.floor(j / 3)}'
            
            blockObj[coord].append(arr[i][j])
            
    return checkNestedArr(list(blockObj.values()))
